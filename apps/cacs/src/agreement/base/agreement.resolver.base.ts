/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateAgreementArgs } from "./CreateAgreementArgs";
import { UpdateAgreementArgs } from "./UpdateAgreementArgs";
import { DeleteAgreementArgs } from "./DeleteAgreementArgs";
import { AgreementCountArgs } from "./AgreementCountArgs";
import { AgreementFindManyArgs } from "./AgreementFindManyArgs";
import { AgreementFindUniqueArgs } from "./AgreementFindUniqueArgs";
import { Agreement } from "./Agreement";
import { User } from "../../user/base/User";
import { AgreementService } from "../agreement.service";
@graphql.Resolver(() => Agreement)
export class AgreementResolverBase {
  constructor(protected readonly service: AgreementService) {}

  async _agreementsMeta(
    @graphql.Args() args: AgreementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Agreement])
  async agreements(
    @graphql.Args() args: AgreementFindManyArgs
  ): Promise<Agreement[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Agreement, { nullable: true })
  async agreement(
    @graphql.Args() args: AgreementFindUniqueArgs
  ): Promise<Agreement | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Agreement)
  async createAgreement(
    @graphql.Args() args: CreateAgreementArgs
  ): Promise<Agreement> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Agreement)
  async updateAgreement(
    @graphql.Args() args: UpdateAgreementArgs
  ): Promise<Agreement | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Agreement)
  async deleteAgreement(
    @graphql.Args() args: DeleteAgreementArgs
  ): Promise<Agreement | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Agreement
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
